{"version":3,"file":"static/js/822.f01e3a6a.chunk.js","mappings":"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","sources":["components/Setting/ChangePasswordDialog.js","components/Setting/Account.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Grid, TextField, Button } from '@mui/material'\r\nimport { useFormik } from 'formik'\r\nimport * as yup from 'yup'\r\nimport { AI_change_password } from 'API/userAPI'\r\nimport { useAIEventHandler, useInstance } from 'easy-redux-http-call'\r\nimport { enqueueSnackbar } from 'notistack'\r\n\r\nconst changePasswordSchema = yup.object().shape({\r\n  currentPassword: yup.string().label(\"Password\").required('Required'),\r\n  newPassword: yup.string().required('Required').label(\"New Password\").min(8),\r\n  confirmNewPassword: yup.string().label(\"Confirm New Password\").min(8).required('Required').oneOf([yup.ref('newPassword'), null], 'Passwords must match')\r\n})\r\n\r\nexport default function ChangePasswordDialog(props) {\r\n  const { open, handleClose } = props\r\n\r\n  const changePasswordState = useInstance(AI_change_password)\r\n\r\n  const handleChangePassword = (values) => {\r\n    AI_change_password.call({\r\n      params: values\r\n    })\r\n  }\r\n\r\n  useAIEventHandler(\r\n    AI_change_password,\r\n    {\r\n      onSuccess: (res) => {\r\n        enqueueSnackbar(res?.data?.message, {\r\n          variant: 'success'\r\n        })\r\n        handleClose()\r\n      },\r\n      onError: (res) => {\r\n        enqueueSnackbar(res?.error?.message, {\r\n          variant: 'error'\r\n        })\r\n      }\r\n    }\r\n  )\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      currentPassword: '',\r\n      newPassword: '',\r\n      confirmNewPassword: ''\r\n    },\r\n    validationSchema: changePasswordSchema,\r\n    onSubmit: handleChangePassword\r\n  })\r\n  const { values, handleChange, handleBlur, touched, errors } = formik\r\n\r\n  useEffect(() => {\r\n    if (!open) {\r\n      formik.resetForm();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [open]);\r\n\r\n  const generateFormikProps = (key) => {\r\n    return {\r\n      fullWidth: true,\r\n      name: key,\r\n      value: values[key],\r\n      onChange: handleChange,\r\n      onBlur: handleBlur,\r\n      helperText: touched[key] && errors[key],\r\n      error: touched[key] && errors[key],\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Dialog fullWidth open={open} onClose={handleClose}>\r\n      <DialogTitle>Change Password</DialogTitle>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <DialogContent>\r\n          <Grid display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            <TextField\r\n              {...generateFormikProps(\"currentPassword\")}\r\n              placeholder=\"Current Password\"\r\n              label=\"Current Password\"\r\n            />\r\n\r\n            <TextField\r\n              {...generateFormikProps(\"newPassword\")}\r\n              placeholder=\"New Password\"\r\n              label=\"New Password\"\r\n            />\r\n\r\n            <TextField\r\n              {...generateFormikProps(\"confirmNewPassword\")}\r\n              placeholder=\"Confirm New Password\"\r\n              label=\"Confirm New Password\"\r\n            />\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} variant=\"text\">Cancel</Button>\r\n          <Button type=\"submit\" disabled={changePasswordState.loading}>Save</Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Avatar, Button, FormControl, Grid, InputLabel, MenuItem, Select, TextField } from '@mui/material'\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { AI_update_user_detail, AI_user_detail } from 'API/userAPI';\r\nimport { useInstance } from 'easy-redux-http-call';\r\nimport { useFormik } from 'formik';\r\nimport { generateFormikInput } from 'utils';\r\nimport * as yup from \"yup\";\r\nimport HeaderWrapper from 'components/Wrapper/HeaderWrapper';\r\nimport { LoadingAnimation } from 'containers/SuspenseFallback/SuspenseFallback';\r\nimport ChangePasswordDialog from './ChangePasswordDialog';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  dmUserProfileInfo: {\r\n    padding: theme.spacing(1.5),\r\n    borderRadius: theme.shape.borderRadius,\r\n    display: \"flex\",\r\n    position: \"relative\",\r\n    marginTop: theme.spacing(1),\r\n    width: \"fit-content\",\r\n    margin: \"auto\",\r\n    \"&>div\": {\r\n      width: \"100px\",\r\n      height: \"100px\",\r\n    },\r\n  },\r\n  dmEditingProfile: {\r\n    \"&>div\": {\r\n      marginTop: theme.spacing(2),\r\n      width: \"100%\"\r\n    },\r\n  },\r\n  dmEditProfileIcon: {\r\n    position: \"absolute !important\",\r\n    right: 10,\r\n    top: 10,\r\n  },\r\n  dmUserAction: {\r\n    marginTop: theme.spacing(1),\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  }\r\n}))\r\n\r\nconst userProfileSchema = yup.object().shape({\r\n  name: yup.string().required(\"Required\"),\r\n});\r\n\r\nlet init = {\r\n  name: \"\",\r\n  email: \"\",\r\n  timezone: ''\r\n}\r\n\r\nexport default function Account() {\r\n  const classes = useStyles()\r\n  const [initialState, setInitialState] = useState(init)\r\n  const [showChangePasswordDialog, setShowChangePasswordDialog] = useState(false)\r\n\r\n  const userState = useInstance(AI_user_detail)\r\n  const updateUserState = useInstance(AI_update_user_detail)\r\n\r\n  useEffect(() => {\r\n    if (userState?.data?.user) {\r\n      let user = userState?.data?.user\r\n      setInitialState({\r\n        name: user.name,\r\n        email: user.email,\r\n        timezone: user.timezone\r\n      })\r\n    }\r\n  }, [userState])\r\n\r\n\r\n  const handleUpdate = (value) => {\r\n    AI_update_user_detail.call({\r\n      params: value\r\n    })\r\n  }\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: initialState,\r\n    onSubmit: handleUpdate,\r\n    validationSchema: userProfileSchema,\r\n  });\r\n\r\n  return (\r\n    <HeaderWrapper backAction title=\"Account\">\r\n      {userState?.loading ? <LoadingAnimation /> :\r\n        <Grid>\r\n          <Grid className={classes.dmUserProfileInfo}>\r\n            <Avatar src={userState?.data?.user?.profileUrl} alt=\"profile-img\" >\r\n              {userState?.data?.user?.name?.[0]?.toUpperCase() || \"-\"}\r\n            </Avatar>\r\n          </Grid>\r\n          <Grid>\r\n            <Grid className={classes.dmEditingProfile}>\r\n              <TextField\r\n                {...generateFormikInput(formik, \"name\")}\r\n                fullWidth\r\n                label=\"Name\"\r\n                placeholder=\"Name\"\r\n              />\r\n              <TextField\r\n                {...generateFormikInput(formik, \"email\")}\r\n                disabled\r\n                fullWidth\r\n                label=\"Email\"\r\n                placeholder=\"Email\"\r\n              />\r\n\r\n\r\n              <FormControl fullWidth>\r\n                <InputLabel id=\"timezone-input\">Timezone</InputLabel>\r\n                <Select\r\n                  disabled\r\n                  defaultValue={formik.values.timezone}\r\n                  labelId=\"timezone-input\"\r\n                  label=\"Timezone\"\r\n                  value={formik.values.timezone}\r\n                >\r\n                  <MenuItem value=\"Asia/Kolkata\">Asia/Kolkata</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid className={classes.dmUserAction}>\r\n              <Button onClick={() => setShowChangePasswordDialog(true)}>Change Password</Button>\r\n              <Button\r\n                onClick={formik.handleSubmit}\r\n                type=\"submit\"\r\n                disabled={!formik.dirty || !formik.isValid || updateUserState.loading}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      }\r\n\r\n      <ChangePasswordDialog\r\n        open={showChangePasswordDialog}\r\n        handleClose={() => setShowChangePasswordDialog(false)}\r\n      />\r\n\r\n    </HeaderWrapper >\r\n  )\r\n}\r\n"],"names":["changePasswordSchema","yup","shape","currentPassword","label","required","newPassword","min","confirmNewPassword","oneOf","ChangePasswordDialog","props","open","handleClose","changePasswordState","useInstance","AI_change_password","useAIEventHandler","onSuccess","res","_res$data","enqueueSnackbar","data","message","variant","onError","_res$error","error","formik","useFormik","initialValues","validationSchema","onSubmit","values","params","handleChange","handleBlur","touched","errors","useEffect","resetForm","generateFormikProps","key","fullWidth","name","value","onChange","onBlur","helperText","_jsxs","Dialog","onClose","children","_jsx","DialogTitle","handleSubmit","DialogContent","Grid","display","flexDirection","gap","TextField","placeholder","DialogActions","Button","onClick","type","disabled","loading","useStyles","makeStyles","theme","dmUserProfileInfo","padding","spacing","borderRadius","position","marginTop","width","margin","height","dmEditingProfile","dmEditProfileIcon","right","top","dmUserAction","justifyContent","userProfileSchema","init","email","timezone","Account","_userState$data3","_userState$data3$user","_userState$data4","_userState$data4$user","_userState$data4$user2","_userState$data4$user3","classes","initialState","setInitialState","useState","showChangePasswordDialog","setShowChangePasswordDialog","userState","AI_user_detail","updateUserState","AI_update_user_detail","_userState$data","user","_userState$data2","enableReinitialize","HeaderWrapper","backAction","title","LoadingAnimation","className","Avatar","src","profileUrl","alt","toUpperCase","generateFormikInput","FormControl","InputLabel","id","Select","defaultValue","labelId","MenuItem","dirty","isValid"],"sourceRoot":""}