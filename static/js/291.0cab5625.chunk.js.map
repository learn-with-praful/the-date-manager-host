{"version":3,"file":"static/js/291.0cab5625.chunk.js","mappings":"8TAYMA,GAAYC,EAAAA,EAAAA,IAAW,SAACC,GAAK,MAAM,CACvCC,qBAAsB,CACpBC,UAAW,GACXC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAEdC,8BAA+B,CAC7BC,MAAO,OACP,MAAO,CACLC,MAAOR,EAAMS,QAAQC,KAAK,KAC1BR,UAAW,IAGfS,mBAAoB,CAClBT,UAAW,GACX,QAAS,CACPA,UAAW,IAEb,WAAY,CACVA,UAAW,GACXE,eAAgB,kBAGrB,IAEc,SAASQ,IACtB,IAAMC,EAAUf,IACVgB,GAASC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MAEXC,GAAqBC,EAAAA,EAAAA,IAAYC,EAAAA,IACjCC,GAA0BF,EAAAA,EAAAA,IAAYG,EAAAA,KAE5CC,EAAAA,EAAAA,IAAkBD,EAAAA,GAA0B,CAC1CE,QAAS,SAACC,GAAW,IAADC,GAClBC,EAAAA,EAAAA,IAAqB,OAALF,QAAK,IAALA,GAAY,QAAPC,EAALD,EAAOA,aAAK,IAAAC,OAAP,EAALA,EAAcE,QAAS,CAAEC,QAAS,UAClDb,EAAS,SACX,KAGFO,EAAAA,EAAAA,IAAkBH,EAAAA,GAAoB,CACpCU,UAAW,SAACC,GAAU,IAADC,GACnBL,EAAAA,EAAAA,IAAoB,OAAJI,QAAI,IAAJA,GAAU,QAANC,EAAJD,EAAMA,YAAI,IAAAC,OAAN,EAAJA,EAAYJ,QAAS,CAAEC,QAAS,YAChDb,EAAS,SACX,EACAQ,QAAS,SAACC,GAAW,IAADQ,GAClBN,EAAAA,EAAAA,IAAqB,OAALF,QAAK,IAALA,GAAY,QAAPQ,EAALR,EAAOA,aAAK,IAAAQ,OAAP,EAALA,EAAcL,QAAS,CAAEC,QAAS,SACpD,KAGFK,EAAAA,EAAAA,YAAU,WACRZ,EAAAA,GAAAA,KAA8B,CAC5BR,OAAQ,CACNqB,MAAOrB,EAAOqB,QAIpB,GAAG,IAEH,IASMC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,YAAa,GACbC,gBAAiB,IAEnBC,iBAAkBC,EAAAA,GAAW,CAC3BH,YAAaG,EAAAA,KAAaC,MAAM,gBAAgBC,IAAI,GAAGC,SAAS,YAChEL,gBAAiBE,EAAAA,KAAaC,MAAM,oBAAoBC,IAAI,GAAGE,MAAM,CAACJ,EAAAA,GAAQ,eAAgB,MAAO,0BAEvGK,SAlB0B,SAACC,GAC3B5B,EAAAA,GAAAA,KAAwB,CACtBN,OAAQ,CACNqB,MAAOrB,EAAOqB,MACdc,SAAUD,EAAOT,cAGvB,IAcA,OACEW,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CAAAC,SACY,OAAvB/B,QAAuB,IAAvBA,GAAAA,EAAyBgC,SAAUH,EAAAA,EAAAA,KAACI,EAAAA,EAAgB,KACnDJ,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACC,UAAW3C,EAAQZ,qBAAqBmD,UAC5CK,EAAAA,EAAAA,MAACF,EAAAA,GAAI,CAACC,UAAW3C,EAAQP,8BAA8B8C,SAAA,EACrDF,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAAC7B,QAAQ,KAAK8B,WAAW,MAAKP,SAAC,oBAC1CF,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAAC7B,QAAQ,QAAOuB,SAAC,uEAC5BK,EAAAA,EAAAA,MAAA,QAAMD,UAAW3C,EAAQF,mBAAoBoC,SAAUX,EAAOwB,aAAaR,SAAA,EAEzEF,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CACRC,WAAS,EACTC,WAAS,EACTpB,MAAM,eACNqB,KAAK,WACLnC,QAAQ,WACRoC,KAAK,cACLC,MAAO9B,EAAOY,OAAOT,YACrB4B,SAAU/B,EAAOgC,aACjB3C,MAAOW,EAAOiC,QAAQ9B,aAAe+B,QAAQlC,EAAOmC,OAAOhC,aAC3DiC,WAAYpC,EAAOiC,QAAQ9B,aAAeH,EAAOmC,OAAOhC,eAG1DW,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CACRC,WAAS,EACTnB,MAAM,mBACNqB,KAAK,WACLnC,QAAQ,WACRoC,KAAK,kBACLC,MAAO9B,EAAOY,OAAOR,gBACrB2B,SAAU/B,EAAOgC,aACjB3C,MAAOW,EAAOiC,QAAQ7B,iBAAmB8B,QAAQlC,EAAOmC,OAAO/B,iBAC/DgC,WAAYpC,EAAOiC,QAAQ7B,iBAAmBJ,EAAOmC,OAAO/B,mBAG9DU,EAAAA,EAAAA,KAACuB,EAAAA,EAAM,CACLT,KAAK,SACLU,KAAK,QACLC,SAAUzD,EAAmBmC,UAAYjB,EAAOwC,QAAUxC,EAAOyC,QAAQzB,SAC1E,6BASf,C","sources":["containers/ResetPassword/ResetPassword.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { Button, Grid, TextField, Typography } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport HeaderWrapper from 'components/Wrapper/HeaderWrapper'\r\nimport { useFormik } from 'formik';\r\nimport * as yup from \"yup\";\r\nimport { API_reset_password, API_validate_reset_token } from 'API/userAPI';\r\nimport { useAIEventHandler, useInstance } from 'easy-redux-http-call';\r\nimport { useNavigate, useParams } from 'react-router';\r\nimport { enqueueSnackbar } from 'notistack';\r\nimport { LoadingAnimation } from 'containers/SuspenseFallback/SuspenseFallback';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  dmChangePasswordRoot: {\r\n    marginTop: 60,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  dmChangePasswordFormContainer: {\r\n    width: \"100%\",\r\n    \"&>p\": {\r\n      color: theme.palette.grey[500],\r\n      marginTop: 5,\r\n    },\r\n  },\r\n  changePasswordForm: {\r\n    marginTop: 10,\r\n    \"&>div\": {\r\n      marginTop: 10,\r\n    },\r\n    \"&>button\": {\r\n      marginTop: 10,\r\n      justifyContent: \"space-between\",\r\n    },\r\n  }\r\n}));\r\n\r\nexport default function ChangePassword() {\r\n  const classes = useStyles()\r\n  const params = useParams()\r\n  const navigate = useNavigate()\r\n\r\n  const resetPasswordState = useInstance(API_reset_password)\r\n  const validateResetTokenState = useInstance(API_validate_reset_token)\r\n\r\n  useAIEventHandler(API_validate_reset_token, {\r\n    onError: (error) => {\r\n      enqueueSnackbar(error?.error?.message, { variant: 'error' })\r\n      navigate('/login')\r\n    }\r\n  })\r\n\r\n  useAIEventHandler(API_reset_password, {\r\n    onSuccess: (data) => {\r\n      enqueueSnackbar(data?.data?.message, { variant: 'success' })\r\n      navigate('/login')\r\n    },\r\n    onError: (error) => {\r\n      enqueueSnackbar(error?.error?.message, { variant: 'error' })\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    API_validate_reset_token.call({\r\n      params: {\r\n        token: params.token\r\n      }\r\n    })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  const handleResetPassword = (values) => {\r\n    API_reset_password.call({\r\n      params: {\r\n        token: params.token,\r\n        password: values.newPassword\r\n      }\r\n    })\r\n  }\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      newPassword: '',\r\n      confirmPassword: ''\r\n    },\r\n    validationSchema: yup.object({\r\n      newPassword: yup.string().label(\"New Password\").min(8).required('Required'),\r\n      confirmPassword: yup.string().label(\"Confirm Password\").min(8).oneOf([yup.ref('newPassword'), null], 'Passwords must match')\r\n    }),\r\n    onSubmit: handleResetPassword\r\n  })\r\n\r\n  return (\r\n    <HeaderWrapper>\r\n      {validateResetTokenState?.loading ? <LoadingAnimation /> :\r\n        <Grid className={classes.dmChangePasswordRoot}>\r\n          <Grid className={classes.dmChangePasswordFormContainer}>\r\n            <Typography variant=\"h4\" fontWeight=\"600\">Reset password</Typography>\r\n            <Typography variant=\"body2\">Your new password must be different from previous used passwords.</Typography>\r\n            <form className={classes.changePasswordForm} onSubmit={formik.handleSubmit}>\r\n\r\n              <TextField\r\n                fullWidth\r\n                autoFocus\r\n                label=\"New Password\"\r\n                type=\"password\"\r\n                variant=\"outlined\"\r\n                name=\"newPassword\"\r\n                value={formik.values.newPassword}\r\n                onChange={formik.handleChange}\r\n                error={formik.touched.newPassword && Boolean(formik.errors.newPassword)}\r\n                helperText={formik.touched.newPassword && formik.errors.newPassword}\r\n              />\r\n\r\n              <TextField\r\n                fullWidth\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                variant=\"outlined\"\r\n                name=\"confirmPassword\"\r\n                value={formik.values.confirmPassword}\r\n                onChange={formik.handleChange}\r\n                error={formik.touched.confirmPassword && Boolean(formik.errors.confirmPassword)}\r\n                helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n              />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                size=\"large\"\r\n                disabled={resetPasswordState.loading || !formik.dirty || !formik.isValid}\r\n              >\r\n                Change Password\r\n              </Button>\r\n            </form>\r\n          </Grid>\r\n        </Grid>\r\n      }\r\n    </HeaderWrapper>\r\n  )\r\n}\r\n"],"names":["useStyles","makeStyles","theme","dmChangePasswordRoot","marginTop","display","justifyContent","alignItems","dmChangePasswordFormContainer","width","color","palette","grey","changePasswordForm","ChangePassword","classes","params","useParams","navigate","useNavigate","resetPasswordState","useInstance","API_reset_password","validateResetTokenState","API_validate_reset_token","useAIEventHandler","onError","error","_error$error","enqueueSnackbar","message","variant","onSuccess","data","_data$data","_error$error2","useEffect","token","formik","useFormik","initialValues","newPassword","confirmPassword","validationSchema","yup","label","min","required","oneOf","onSubmit","values","password","_jsx","HeaderWrapper","children","loading","LoadingAnimation","Grid","className","_jsxs","Typography","fontWeight","handleSubmit","TextField","fullWidth","autoFocus","type","name","value","onChange","handleChange","touched","Boolean","errors","helperText","Button","size","disabled","dirty","isValid"],"sourceRoot":""}